1.  Traditional password storage.

People are bad at choosing passwords.  2 problems:
1.  people all choose the same password
2.  people choose the same passwords for multiple sites
one site is compromised, you choose

idea:  entropy.  If everyone chooses different passwords-- high entropy
if everyone chooses the same password-- low entropy

====================================================
    Naive solution:  store passwords in cleartext (not encrpyted)
    	  obviously a very bad idea.
   	  someone gains access to the server, all is lost.	
	  people share passwords between sites, so even if there's nothing sensitive on your site, some people will be hurt.
===================================================
    Less naive solution:  1-way (cryptographic) hash
    Hash function in general:  maps "keys" to "hash value"
    useful for making lookup tables
    should not be able to guess hash value from key
    in theory, a cryptanalytical attack is possible
    in practice, worry more about brute force
-------------
    Common hash functions:  SHA1
    Secure Hash Algorithm (NSA standard).
    by 2010, SHA1 was pretty brute-forceable.  a nice laptop can do 2 million in a second.
    And we're moving to SHA3 (skein 1024 was entered as a candidate)
    SHA1 is still widely used

    remember XKCD hash breaking contest?
    used skein 1024 hash function
    output was 1024 bits.  Best guess after 2 days of distributed brute force was wrong on 384 bits.
    wanted to get the most bits of the hashed value correct
    strategy was to choose random values and hash them
    If you knew that some value got n bits correct, it wouldn't be useful to base your next guess on that.
    That's a good password hash
------------

    Even bigger problem:  even if it takes me a month to hash all possible passwords, once I do it, I have all of them.
    called "rainbow tables"
    
===============================================


    Doing it right:  salts.
    every user has a salt, stored in cleartext in the database
    username | salt | hashed password + salt
    when a user types password, computer takes password, appends salt, hashes both
    so you need to know the password to gain access
    but you don't have the
    
    this means you need a rainbow table for every possible salt


===============================================
General problems
1.  even if your cryptography is awesome, and people choose awesome passwords, so server compromises don't lead to learning passwords, there are other ways to get them.

e.g. take a good camera and point it at my keyboard while I type my password.


2.  Password recovery
This is a big problem.
Security questions are a very poor choice.
Example:  in 2010 some college student got access to Sara Palin's email account by looking up biographical details.



3.  Alternate password schemes:
*biometrics
*2-factor authorization w/hardware dongles

